import React, { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { VALIDATION, ERROR_MESSAGES } from '../../utils/constants';

const RegisterForm = ({ onSuccess, onSwitchToLogin }) => {
  const { register, authLoading } = useAuth();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    username: '',
    password: '',
    confirmPassword: '',
    cardId: ''
  });
  const [errors, setErrors] = useState({});
  const [showPassword, setShowPassword] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Vui l√≤ng nh·∫≠p h·ªç t√™n';
    } else if (formData.name.trim().length < 2) {
      newErrors.name = 'H·ªç t√™n ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±';
    } else if (formData.name.trim().length > 100) {
      newErrors.name = 'H·ªç t√™n kh√¥ng ƒë∆∞·ª£c qu√° 100 k√Ω t·ª±';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Vui l√≤ng nh·∫≠p email';
    } else if (!VALIDATION.EMAIL_REGEX.test(formData.email)) {
      newErrors.email = 'Email kh√¥ng h·ª£p l·ªá';
    }

    if (!formData.username.trim()) {
      newErrors.username = 'Vui l√≤ng nh·∫≠p t√†i kho·∫£n';
    } else if (!/^[a-zA-Z0-9_]{3,20}$/.test(formData.username)) {
      newErrors.username = 'T√†i kho·∫£n ph·∫£i t·ª´ 3-20 k√Ω t·ª±, ch·ªâ ch·ª©a ch·ªØ, s·ªë v√† d·∫•u g·∫°ch d∆∞·ªõi';
    }

    if (!formData.password) {
      newErrors.password = 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u';
    } else if (formData.password.length < 6) {
      newErrors.password = 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±';
    }

    if (!formData.confirmPassword) {
      newErrors.confirmPassword = 'Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u';
    } else if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = 'M·∫≠t kh·∫©u nh·∫≠p l·∫°i kh√¥ng kh·ªõp';
    }

    if (!formData.cardId.trim()) {
      newErrors.cardId = 'Vui l√≤ng nh·∫≠p m√£ th·∫ª th∆∞ vi·ªán';
    } else if (formData.cardId.trim().length !== 12) {
      newErrors.cardId = 'M√£ th·∫ª ph·∫£i c√≥ ƒë√∫ng 12 k√Ω t·ª±';
    } else if (!/^LIB[A-Z0-9]{9}$/i.test(formData.cardId.trim())) {
      newErrors.cardId = 'M√£ th·∫ª ph·∫£i c√≥ ƒë·ªãnh d·∫°ng LIB + 9 k√Ω t·ª±/s·ªë (VD: LIB123ABC789)';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    try {
      const apiData = {
        name: formData.name.trim(),
        email: formData.email.trim().toLowerCase(),
        username: formData.username.trim().toLowerCase(),
        password: formData.password,
        cardId: formData.cardId.trim().toUpperCase()
      };

      const result = await register(apiData);
      
      if (result.success) {
        if (onSuccess) {
          onSuccess(result);
        }
      } else {
        setErrors({ submit: result.message || 'ƒêƒÉng k√Ω t√†i kho·∫£n th·∫•t b·∫°i' });
      }
    } catch (error) {
      console.error('Registration error:', error);
      setErrors({ submit: ERROR_MESSAGES.NETWORK_ERROR });
    }
  };

  return (
    <div 
      className="max-w-3xl mx-auto overflow-hidden border-2 border-solid border-black"
      style={{
        borderTopLeftRadius: '16px',
        borderTopRightRadius: '16px', 
        borderBottomRightRadius: '150px',
        borderBottomLeftRadius: '16px',
        backgroundColor: 'white',
        boxShadow: '8px 8px 24px rgba(0, 0, 0, 0.15)',
      }}
    >
      <div className="p-6">
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            ƒêƒÉng k√Ω t√†i kho·∫£n
          </h2>
          <p className="text-gray-600 text-sm">
            T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ s·ª≠ d·ª•ng h·ªá th·ªëng th∆∞ vi·ªán
          </p>
        </div>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className='mr-10 ml-10'>
            <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">
              H·ªç v√† t√™n <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${
                errors.name ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="Nh·∫≠p h·ªç v√† t√™n ƒë·∫ßy ƒë·ªß"
              autoComplete="name"
            />
            {errors.name && <p className="mt-1 text-sm text-red-500">{errors.name}</p>}
          </div>

          <div className='mr-10 ml-10'>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">
              Email <span className="text-red-500">*</span>
            </label>
            <input
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${
                errors.email ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="name@example.com"
              autoComplete="email"
            />
            {errors.email && <p className="mt-1 text-sm text-red-500">{errors.email}</p>}
            <p className="mt-1 text-xs text-gray-500">
              üìß Email ph·∫£i tr√πng v·ªõi email ƒë√£ ƒëƒÉng k√Ω th·∫ª th∆∞ vi·ªán
            </p>
          </div>

          <div className='mr-10 ml-10'>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700 mb-1">
              T√†i kho·∫£n <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="username"
              name="username"
              value={formData.username}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${
                errors.username ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="VD: user123, nguyen_van_a"
              autoComplete="username"
              style={{ textTransform: 'lowercase' }}
            />
            {errors.username && <p className="mt-1 text-sm text-red-500">{errors.username}</p>}
        
          </div>

        
          <div className='mr-10 ml-10'>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">
              M·∫≠t kh·∫©u <span className="text-red-500">*</span>
            </label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                id="password"
                name="password"
                value={formData.password}
                onChange={handleChange}
                className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${
                  errors.password ? 'border-red-500' : 'border-gray-300'
                }`}
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                autoComplete="new-password"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute right-3 top-2 text-gray-400 hover:text-gray-600"
              >
                {showPassword ? 'üôà' : 'üëÅÔ∏è'}
              </button>
            </div>
            {errors.password && <p className="mt-1 text-sm text-red-500">{errors.password}</p>}
          </div>

          <div className='mr-10 ml-10'>
            <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">
              Nh·∫≠p l·∫°i m·∫≠t kh·∫©u <span className="text-red-500">*</span>
            </label>
            <input
              type={showPassword ? "text" : "password"}
              id="confirmPassword"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${
                errors.confirmPassword ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
              autoComplete="new-password"
            />
            {errors.confirmPassword && <p className="mt-1 text-sm text-red-500">{errors.confirmPassword}</p>}
          </div>
  <div className='mr-10 ml-10'>
            <label htmlFor="cardId" className="block text-sm font-medium text-gray-700 mb-1">
              M√£ th·∫ª th∆∞ vi·ªán <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              id="cardId"
              name="cardId"
              value={formData.cardId}
              onChange={handleChange}
              className={`w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent ${
                errors.cardId ? 'border-red-500' : 'border-gray-300'
              }`}
              placeholder="VD: LIB123ABC789"
              maxLength={12}
              style={{ textTransform: 'uppercase' }}
            />
            {errors.cardId && <p className="mt-1 text-sm text-red-500">{errors.cardId}</p>}
            <div className="mt-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-blue-800">
                üìù <strong>B·∫Øt bu·ªôc c√≥ m√£ th·∫ª th∆∞ vi·ªán ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n</strong>
              </p>
              <p className="text-xs text-blue-600 mt-1">
                Ch∆∞a c√≥ th·∫ª th∆∞ vi·ªán?{' '}
                <button
                  type="button"
                  onClick={() => window.location.href = '/card-register'}
                  className="text-blue-700 hover:text-blue-800 font-medium underline"
                >
                  ƒêƒÉng k√Ω th·∫ª th∆∞ vi·ªán ngay
                </button>
              </p>
            </div>
          </div>

          {errors.submit && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3 mr-10 ml-10">
              <p className="text-red-600 text-sm">{errors.submit}</p>
            </div>
          )}

          <div className="bg-green-50 border border-green-200 rounded-lg p-3 mx-10">
            <h4 className="font-medium text-green-800 mb-2">‚úÖ Quy tr√¨nh ho√†n t·∫•t:</h4>
            <div className="text-sm text-green-700 space-y-1">
              <p>1. ƒê√£ c√≥ m√£ th·∫ª th∆∞ vi·ªán ‚Üí ƒêi·ªÅn v√†o form tr√™n</p>
              <p>2. Email ph·∫£i tr√πng v·ªõi email ƒë√£ ƒëƒÉng k√Ω th·∫ª</p>
              <p>3. T·∫°o t√†i kho·∫£n v√† m·∫≠t kh·∫©u ƒë·ªÉ ƒëƒÉng nh·∫≠p</p>
              <p>4. H·ªá th·ªëng t·ª± ƒë·ªông li√™n k·∫øt th·∫ª v·ªõi t√†i kho·∫£n</p>
            </div>
          </div>

          <button
            type="submit"
            disabled={authLoading}
            className={`px-24 py-3 rounded-xl font-semibold text-white text-lg transition-colors mx-auto block ${
              authLoading
                ? 'bg-gray-400 cursor-not-allowed'
                : 'bg-primary-500 hover:bg-primary-600'
            }`}
          >
            {authLoading ? (
              <div className="flex items-center justify-center">
                <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                ƒêang ƒëƒÉng k√Ω...
              </div>
            ) : (
              'ƒêƒÉng k√Ω t√†i kho·∫£n'
            )}
          </button>

          <div className="text-center">
            <p className="text-gray-600">
              ƒê√£ c√≥ t√†i kho·∫£n?{' '}
              <button
                type="button"
                onClick={onSwitchToLogin}
                className="text-primary-600 hover:text-primary-700 font-medium"
              >
                ƒêƒÉng nh·∫≠p ngay
              </button>
            </p>
          </div>

          <div className="text-center border-t pt-4 mt-6">
            <p className="text-sm text-gray-600">
              ‚ö†Ô∏è <strong>L∆∞u √Ω:</strong> Email ph·∫£i tr√πng v·ªõi email ƒë√£ ƒëƒÉng k√Ω th·∫ª th∆∞ vi·ªán
            </p>
            <p className="text-sm text-gray-600 mt-1">
              Ch∆∞a c√≥ th·∫ª th∆∞ vi·ªán?{' '}
              <button
                type="button"
                onClick={() => window.location.href = '/card-register'}
                className="text-primary-600 hover:text-primary-700 font-medium underline"
              >
                ƒêƒÉng k√Ω th·∫ª th∆∞ vi·ªán tr∆∞·ªõc
              </button>
            </p>
          </div>
        </form>
      </div>
    </div>
  );
};

export default RegisterForm;